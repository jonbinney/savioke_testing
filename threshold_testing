#! /usr/bin/env python

import rospy
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
import argparse, signal, sys, math

STATE_RAMP_UP = 0
STATE_RAMP_LEVEL = 1
STATE_RAMP_DOWN = 2
STATE_ZERO = 3

def odomCallback(odom_msg):
    global g_start_odom, g_last_odom, g_counter
    if g_counter == 0:
        g_start_odom = odom_msg
        g_counter = 1
    else:
        g_last_odom = odom_msg

rospy.init_node('threshold_test')

parser = argparse.ArgumentParser()
parser.add_argument('distance', help="distance to travel", type=float)
parser.add_argument('final_vel', help="desired final velocity", type=float)
args = parser.parse_args()

g_twist = Twist()
g_start_odom = Odometry()
g_last_odom = Odometry()
g_counter = 0
g_twist.linear.x = 0.0

cmd_vel_pub = rospy.Publisher('cmd_vel/monitor', Twist, queue_size=2) 
rospy.Subscriber('odom', Odometry, odomCallback)
publish_rate = 100 # hz
rate = rospy.Rate(publish_rate)

acceleration = 0.5 # m/s^2
ramp_increment = acceleration/publish_rate

ramp_distance = args.final_vel**2/(2*acceleration)
const_vel_distance = args.distance - 2*ramp_distance
ramp_time = args.final_vel/acceleration
const_vel_time = const_vel_distance/args.final_vel

state = STATE_RAMP_UP
count = 0
count_increment = 1.0/publish_rate

while not rospy.is_shutdown():
    if state == STATE_RAMP_UP:
        g_twist.linear.x = g_twist.linear.x + ramp_increment
        if count > ramp_time:
            state = STATE_RAMP_LEVEL
            count = 0
        else:
            count = count + count_increment
    elif state == STATE_RAMP_LEVEL:
        g_twist.linear.x = args.final_vel
        if count > const_vel_time:
            state = STATE_RAMP_DOWN
            count = 0
        else:
            count = count + count_increment
    elif state == STATE_RAMP_DOWN:
        g_twist.linear.x = g_twist.linear.x - ramp_increment
        if count > ramp_time:
            state = STATE_ZERO
            count = 0
        else:
            count = count + count_increment
    elif state == STATE_ZERO:
        g_twist.linear.x = 0.0
        cmd_vel_pub.publish(g_twist)
        start_x = g_start_odom.pose.pose.position.x
        start_y = g_start_odom.pose.pose.position.y
        last_x = g_last_odom.pose.pose.position.x
        last_y = g_last_odom.pose.pose.position.y
        total_distance = math.sqrt((last_x - start_x)**2 + (last_y - start_y)**2) 

        q_start = g_start_odom.pose.pose.orientation
        q_last = g_last_odom.pose.pose.orientation

        start_theta = math.atan2(2*(q_start.x*q_start.y + q_start.w*q_start.z), q_start.w*q_start.w + q_start.x*q_start.x - q_start.y*q_start.y - q_start.z*q_start.z)
        last_theta = math.atan2(2*(q_last.x*q_last.y + q_last.w*q_last.z), q_last.w*q_last.w + q_last.x*q_last.x - q_last.y*q_last.y - q_last.z*q_last.z)

        diff_theta = last_theta - start_theta

        print 'Total distance travelled: %f meters' % total_distance
        print 'Difference in theta: %f degrees' % (diff_theta * 180. / 3.141592,)
        sys.exit(0)

    cmd_vel_pub.publish(g_twist)
    rate.sleep()
